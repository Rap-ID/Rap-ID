NOTICE: THIS DOCUMENT IS UNDER TRANSLATION.

----------------------------
DESCRIPTION OF THIS DOCUMENT
----------------------------
This document is an unpublished paper describing our power of developing such a project,
how it works and the proven of its features.

***THE CONTENT BEGINS HERE***

Rapid Secure Real-name Authentication Algorithm

Yisheng Chai, Yuze Fu, Chenyu Li, (Indicator) Peng Gong

Abstract

In people’s daily life, there are increasing conditions needing user authentication,
but the existing methods are not user-friendly or not enough secure, or requiring
extra hardwares which may cause charges. Additionally, China government is pushing
real-name internet into action, so it is quite vital to find a method which provides
a low-cost and is easy to take into action without using ID card readers. For the two
reasons above, we come up with a algorithm providing rapid secured authentication which
also solves the problem of acting real-name internet. The algorithm relies on intranet
communication between mobile phone, which is taken as hardware token, and computers and
uses token-passing mechanism to provide the environment where the end-user only have to
click a button to finish authentication. It also uses rolling-password mechanism and
pairing system to provide a relatively secure condition. Besides, using the real-name
information filled in when registering a phone number and the ICCID of SIM card in users’
phones, the internet actions is real-named as well as secured . Nowadays, nearly every
internet user own a mobile phone and a personal home network, thus the algorithm is
low-cost and acceptable by people. Meanwhile, API and SDK is provided with the algorithm,
so it is realistic for third-party applications to adapt into it. It can be used in normal
logging-in, real-name payment, registering of net bar, etc. We released the source codes
and API documents and SDKs on GitHub.

Keyword: Authentication, Real-name, Hardware Token, Intranet Communication

Forward

上个暑假我们在利用支付宝购买物品时，发现其支付流程需要用户输入支付密码并用手机短信验证码校验，用户信息输入量大，用户体验不佳。借此，我们开始思考一种既快捷又安全的登陆方式。后来我们在门店充值电话费的时候偶然注意到卖家的电脑上插着“U盾”（银联的电子客户证书），这激发了我们的灵感，现在几乎人人都有智能机，家里Wi-Fi网络也相当普及，也许可以利用手机当做令牌，利用Wi-Fi网络对计算机进行授权。于是在老师的鼓励下，我们在这个假期进行了算法的研究和软件的开发工作。
在对以往相似项目的研究过程中，我们发现有不少技术使用了硬件作为令牌。采用独立硬件会产生成本上升和迭代困难等问题，同时硬件又有可能丢失；此外有些依靠生物识别的技术，成本也较高；研究出一种受众广而费用低，易于配置，同时用户体验良好的身份认证方式势在必行。另外，我们在深入了解时发现，国家正在努力推进网络实名制，而手机的SIM卡恰恰具有一定的实名性，在鉴权的同时完成实名认证是可行的。
对此，我们研究了快速安全实名认证算法，开发出了一套基于局域网的PC和移动端身份认证简化系统，使用以计算机结合手机的方式提供了一种快速安全实名的身份认证算法。
在双端授权交换中，我们并考虑了局域网环境的网络安全以及秘钥存储安全问题，对整个项目的通信加密和账户本地存储进行了深入思考，参考了已有的安全保障方法，采用了token传递机制，摸索出了一套加密解决方案。我们将手机与SIM卡有机结合，通过读取ICCID，结合用户在运营商开户时录入的实名信息，可以非常有效地进行实名制操作。
此外，本算法对外提供了API和SDK，使得第三方应用可以简单方便地使用本算法，扩大了应用范围。
我们认为这一技术方案可以应用到从普通日常登陆，到安全支付操作等复杂多样的应用情形，从而实现其在网吧、论坛、支付平台等中的应用。
本软件系统对于设备的兼容性佳，系统占用小，基于后文第1.4节提出的四层模型可以快速实现跨平台等功能，稳定性和兼容性良好，可扩展性佳。
1.快速安全实名认证算法的提出
1.1 现有登陆保护机制的分析
我们在对现有登陆机制的研究中发现，登陆机制的发展是和威胁账户安全的手段的发展相辅相承的，他们两者间在博弈中进步。现在的认证不仅仅局限于单纯的软件，有些还依赖于外部硬件。我们正是研究了迄今为止的登陆保护机制，才总结和完善出这样一个快速安全实名认证算法。因此在我们引出算法之前，有必要了解一下这些登陆保护技术：
●传统“用户名+密码”：这种方式是登陆的鼻祖，至今仍然被使用在一些对于安全要求不高的场合，然而面对键盘记录、网络数据包截获等手段显得很无力。
●诸如键盘保护等的基于传统登陆方式的基本保护手段：这些方式最早被使用在腾讯的QQ中，以软件对系统内核和驱动程序进行修改，以达到防止键盘记录的作用。但是这种手段并不能从根源上解决键盘记录等问题，因为一旦恶意程序利用非法手段取得内核或系统权限，提前对内核进行注入，那么防御措施便失效了。而且操作系统底层API具有极强的特异性，每个操作系统甚至于每个版本的API都不尽相同，普适性差。
●近些年兴起的手机短信验证：这种方式通过对用户事先已经验证过的手机号码发送验证码，用户登陆时填入以达到验证的目的。这种方式有效地确保了用户登陆的安全性，可是却给用户带来很大的麻烦，用户体验差；同时短信业务也为网络公司带来了一笔不菲的开销。
●银行使用的数字证书：这种方式适用于和资金有关的网银环境，以数字证书识别用户身份。它结合了IC卡与数字证书、数字签名等技术。用户在使用网上银行系统时，通过U盾的加密通道确认客户身份。在进行网上交易时，数据先送入插入电脑USB接口的加密卡，并使用私钥进行数字签名，然后再传送到网上银行进行验证。这种方式安全性很高，但是由于额外硬件产生的成本增加，仅仅适合于支付交易等需要极高安全性的场景，难以推广用于普通场景。
经过研究，我们发现以往的方法主要存在如下几个问题：
●单纯的软件防护已经无法抵抗现有的威胁，软件的可修改性和可提权性让保护措施土崩瓦解。单方面从软件找突破是不够的。
●使用额外硬件势必会加重用户负担，增大企业成本。除非是资金流转交互，否则额外硬件很难成为授权保护技术的一部分。
●软件的核心包括良好的用户体验，而复杂的操作流程致使用户体验下降；如果用户已经厌倦繁琐的操作，那么用户量势必要下降。
1.2 现有实名认证方法的综合分析
在纷繁的网络环境中，有些场景出于安全性等考虑，需要实名认证。已有的实名认证方法大多较为复杂，部分需要人工审核。我们总结了以下两种主要的现有实名认证方式：
网络环境下的远程实名认证：其往往需要用户上传身份证明材料，再由网站管理员进行人工审核，从而建立用户与实名信息的对应关系，从而实现实名制。这一方式需要一定的人工投入，同时用户输入多，对于用户的关联性差，容易伪造身份。
现实生活中的硬件实名认证：其依靠身份证及读卡器或数字证书（如eID）来实现对于用户身份的确认。这种方法虽然可靠性高，用户输入少，但是需要额外资金购买硬件，普及较为困难。
经过研究，我们发现以往的实名认证方式往往存在以下问题：
需要用户输入一定量的信息，用户体验不好。
需要额外的人力资源投入来进行审核。
需要额外的资金投入来购买硬件。
无法避免身份的窃取和伪造。
综上，我们认为设计一种既快速又安全，同时能够有效认证身份的鉴权方式势在必行。
1.3 快速安全实名认证算法的设想与概述
对于1.1-1.2节的分析和问题，我们提出了一种创新性的设想，当今智能手机与Wi-Fi网络已经深入万家，我们可以依靠智能手机作为硬件令牌（参见1.4节），利用家庭无线局域网作为传输媒介进行用户身份认证，同时通过对于SIM卡ICCID的识别进行用户实名身份的验证。下面我们将简述对算法的设想。
图3 工作流程

首先，整个系统由计算机、手机、路由器、服务器组成。计算机根据需要向手机发起授权请求，手机作为硬件令牌向服务器申请授权，再通过局域网络利用加密的通信方式使计算机获取权限及手机的ICCID，计算机根据ICCID向服务器查询用户的实名信息并完成相关认证操作。其中，手机由于具有较多的传感器等配套硬件，在其中负责保护整个授权流程。
1.4 理论模型的提出
为了实现上文提及的设想，我们查阅了相关文献并在其基础上进行了改进和创新，提出了硬件令牌、四层机制等概念，并将其应用在了快速安全实名认证算法中。
1.4.1 硬件令牌的设计
任何认证操作都需要令牌，传统的令牌包括密码、U盾、密保卡、手机号码等。我们参考的FIDO(Fast IDentity Online)提出的U2F(Universal Second Factor)协议 使用了硬件作为令牌，可以在不失安全性的前提下保障优秀的用户体验。
在选择硬件令牌的过程中，我们发现智能手机几乎是人手一部，同时智能手机的开放度较高，易于编程，因此我们选择了手机作为令牌，使用家庭局域网作为中介，为电脑进行身份认证。
1.4.2 四层机制的提出
由于算法中组成部分较多，此外我们希望算法可以被第三方自由调用，这就需要其各组件之间低耦合、高互通，所以我们设计了四层模型作为平台工作机制。
图4 四层机制

平台分为凭据提供层、鉴权层、接口层和应用层。
凭据提供层负责由token返回用户身份信息。此外，其还负责由用户名和密码返回token的功能。此层通常运行在一台Internet服务器上。对其而言，接口层和终端用户处于不可见状态。
鉴权层负责的则是处理接口层发来的token请求，作为凭据提供层和接口层的中介。此外，其响应接口层的配对请求。传输的所有数据包均加密。此层通常运行在一台具有Internet访问的Intranet手机上。对其而言，在标准的鉴权流程中，应用层与终端用户处于不可见状态。
接口层负责处理应用层对token的请求。其建立侦听系统，对外提供API来开始一个认证流程并最终返回token。其初始化流程以配对的形式完成。此层通常运行在一台Intranet用户计算机上。对此层而言，在标准鉴权流程中，终端用户与凭据提供层处于不可见状态。
以上三层被称为算法的主平台，它们一致化地对外提供了一些接口，以便应用层的接入。
应用层实质上并不是算法的组成部分，其更应该被视作一系列使用算法API进行身份认证的软件的集合。

图5 应用层划分
如图5，应用层又可分为鉴权部分和应用逻辑部分；前者与算法API及后者通信，从而使后者可以确定用户身份；后者与用户交互，是应用实质性功能的部分，其与算法主平台无关。
借助分层机制我们成功地使得用户并不必关心算法；逻辑层的独立和算法无关性减轻了开发者的工作量，简化了应用使用算法的过程，从而提高了普适性和可应用性。
1.4.3 token方案
由上文，在算法中我们需要一个对象来安全地、间接地和可控地传递用户认证过的身份。在参考了OAuth等方案之后，我们选择了token方案。在OAuth中，其定义了access token作为用户身份的标识符和权限的代表物。access token由服务器维护，对应了用户和应用，可以实现权限的区别化和可控化。
token是一个唯一的字符串，标识了一个用户，凭据提供层负责维护其与用户的对应关系队列。由于队列由凭据提供层控制，token机制有效地实现了可控性；由于token与用户的对应关系在本算法主平台外不可见，token在外界并不能直接地对应一个用户，从而保障了间接性；而token本身并不包含用户资源，因而安全性得证。
图6 token传递图6展示了token在授权流程中的传递机制。应用层向接口层发起授权请求后，接口层将请求传递给鉴权层，鉴权层由存储好的用户鉴权信息向凭据提供层换取token；此后token被逐层由安全可靠的数据链路回传到应用层。通过这一传递机制，我们实现了用户权限授予的转移，即token的传递，各层间互相协助使得应用层获取token而取得用户权限。
图7 根据token获取用户信息

图7展示了应用层由token获得用户信息的过程。应用层在对凭据提供层的请求附加token，凭据提供层分析出token并确定用户，再根据用户返回其在数据库中存储的实名制信息等给应用层。
2.算法工作原理实现与介绍
为了实现本算法，我们开发了手机端、计算机端和服务器端软件，下面我们将对其具体的工作流程进行介绍：
在局域网中，我们定义计算机（接口层）为索取授权客户端，手机（鉴权层）为授权服务端。而在广域网环境下，由于凭据提供层的介入，手机又作为索取授权客户端，凭据提供层作为授权服务端。
在整个系统中，最基本的组成单位是凭据提供层账户数据服务器（处于广域网下）、鉴权层手机授权端、接口层计算机被授权端（手机授权端与计算机处在同一局域网下）。
图8展示了系统的组成。
图8 系统组成

用户的第一次配置流程如下：
用户在http://rapid.cotr.me注册。
用户注册后，在手机端登陆，输入用户名密码。手机端随后对服务器进行形如
“https://rapid.cotr.me/api/auth?user=用户名
&password=密码”的HTTP POST请求，若接受到的服务器返回JSON中错误代码为0，则代表登陆成功，将用户名及密码加密后以SharedPreference存储。
登陆验证成功后，手机端会生成一个随机的4位数作为今后的配对秘钥，并在界面中显示，提示用户记忆。将配对秘钥加密后以SharedPreference存储。
此时用户需要将计算机与手机配对，将手机与电脑连接在同一个局域网下，并打开手机端。手机端启动UdpService开始在局域网中进行49160端口的全局广播，广播频率为0.2s，内容为用户名。同时启动TcpService监听49161端口（用于处理配对）和AuthService监听49162端口（用于处理认证请求）。
当计算机端第一次初始化时，会读取49160端口的udp广播，分析出用户名，同时获取手机端ip。等待用户主动选择用户名，并输入配对密码。取得上述信息后，向手机端发送TCP信息“PAIR+配对密码”，等待回应。
手机端接收到配对请求后，根据解密内容获得输入的配对密钥，与先前存储的配对密钥进行匹配，若相同则返回配对成功消息（“PAIROK”），若不同则返回失败消息（“PAIRFAIL”）。同时对验证次数进行限制，若失败超过5次，应用程序将会停止响应配对请求2小时。
计算机端接收到返回的配对响应后解析，若成功，将配对秘钥加密保存，向用户提示成功。
用户的一次认证流程如下：
当应用需要对用户进行认证时，根据API进行请求，计算机端通过广播搜寻手机端，获取手机端IP，向手机端49162端口发起授权请求（“AUTH+配对密码”）。
手机端收到授权请求后提取信息，将其中的配对密钥与存储的数值进行匹配，若成功，首先读出加密后的账户信息，再对服务器进行形如
“https://rapid.cotr.me/api/auth?user=用户名
&password=密码”的HTTP POST请求，取回token，并以加密形式发送回电脑（“AUTHOK+token”）。
电脑接收后，解析并将token通过API返回给应用层。
应用层根据网络API向凭据提供层获取用户信息。（注： token的有效性由第三方应用与凭据提供层校验）
3.算法工作演示
此次，我们模拟了一个实名购物登陆的实例（地址： http:// rapid.cotr.me/demo/）作为应用层。用户可以在网站上面进行购物，并使用本算法进行认证。如图9：




我们还设计了用户的注册页面，并提供客户端下载服务（地址:http://rapid.cotr.me）。用户可以在此页面进行注册。








关于用户实名制，我们由于没有通信公司的手机卡实名制数据库,所以我们制作了一个模拟数据库接口(地址: http://rapid.cotr.me/api/identity/)其中记录着用户ICCID与用户实名制信息的对应关系。数据库结构如图11：
图11 模拟接口数据库结构

实验环境：
计算机：
CPU：Intel(R) Core i7 4770k @3.9GHz
内存：Kingston 8GB 
网卡：Realtek PCI-e 系列控制器
Android手机：
品牌：Meizu M040
CPU：Mali-400 MP @1638MHz
内存：2GB
路由器：
型号：极路由 HC5661
提供网络服务的网络服务器配置：
服务器提供商：DigitalOcean.Inc
服务器系统： Centos 6.6 final
服务器配置：
CPU： Intel(R) Xeon(R) CPU E5-2630L v2 @ 2.40GHz
内存： 虚拟化 512MB
带宽： 1Gbps
服务器软件配置：
Web服务引擎：Nginx/1.6.0
脚本解释引擎：Node.js/0.10.36
数据库版本：MySQL/5.5,MongoDB/3.0
用户所有的登陆操作是基于账户服务器的，所有的登陆授权以及token生成及校验都是由授权服务器完成（地址：
https://rapid.cotr.me/api/）

图12 注册
用户首先完成注册，以及计算机手机客户端安装。将手机和电脑连入相同局域网络。

图13 手机端登陆
用户在手机上登陆，获取配对密码，点击开始授权。












    
用户在电脑上完成配对工作，手机端给出配对成功提示。
用户在网上购物时，无需手动输入密码，只需点击“登陆并支付”。登陆成功后返回用户实名信息和结算信息。手机给出登陆成功提示。

图17 登陆成功
至此，用户完成了完整的认证流程。
4.快速安全实名认证算法特性分析
4.1 快速性
由上文的工作流程中我们可以得到，用户在操作过程中只需要按动一个按钮，无需像传统方式一样输入用户名和密码、短信验证码或者点击邮箱链接等操作，同时基于局域网络的通信是高效便利的，用户也无需过多等待即可完成认证操作。
在研究过程中，我们对用户的平均登陆时间进行了统计，作为参照物的是普遍认为较快捷的微信扫码登陆。我们保障了流畅的网络和快速的计算机、手机，在尽可能一致的情况下进行了测试。微信扫码的平均登陆时间为11.38s，进行的操作平均为4.7步；而我们的技术只需要5.79s，且用户操作平均为2.4步，均约为前者的一半。
因此，本算法在操作时间和次数上均比其他认证方式更占优势。
4.2 安全性
由于本算法的特殊的应用场合（涉及用户隐私信息和账户信息），同时其工作的环境常处在无线互联网下，因而被窃听风险较高，因此其需要保证具有充分的安全性，所以我们采用了DES加密算法、滚动密钥机制、SSL/TLS协议加密网络流量，同时在软件层面采取了一定措施来防止反汇编带来的安全威胁。此外，我们还对软件的总体安全性进行了测试。
4.2.1 DES加密算法
DES算法属于对称加密算法，在自上世纪70年代美国为首的一些国家和Unix操作系统中有充分应用，具有一定的安全性。
虽然已发表的针对DES的密码分析的研究文章多于所有其它的块密码，到目前为止，最实用的攻击方法仍然是暴力攻击。报告指明，“1999年1月，distributed.net与电子前哨基金会合作，在22小时15分钟内即公开破解了一个DES密钥。”
然而，本算法在其应用过程中破解DES加密算法的唯一安全问题是token的泄露，我们在设计token时考虑到了一些可能的暴力破解问题，因而将token的有效期设定较短，在暴力破解完成之前token就已经过期，无法校验破解结果。此外，我们利用滚动密钥机制保障了密钥的变换，即使暴力破解成功也无法获知当前密钥，从而使暴力破解失去意义。下面我们将论述滚动密钥机制。
4.2.2 滚动密钥机制
暴力破解和反汇编已经成为威胁加密的两大手段，其主要的攻击方式是获知密钥，从而破译原文。因此，将密钥固定很难保障软件的攻击防御力，继而我们采用了滚动密钥机制使密钥变换，进行安全防护。
首先我们约定几个概念：手机和电脑同时存储一个相同的64位密钥，我们称之为固化密钥。将用户的用户名以及密码取MD5运算得出一个散列值，这个作为原始密钥，其对用户有特异性。我们称双端共同使用的一种密钥变换方式为滚动方法。
对密钥的生成方法如下：
用户在手机首次登陆后，手机端将原始密钥使用固化密钥进行DES加密存储，获得种子。手机端在计算机配对成功时将种子加密发送。计算机收到种子后加密存储。
今后需要加密时根据滚动方法，由种子获取密钥。
滚动方法的伪代码如下：
byte[] GetKeyBySeed(byte[] seed)
{
    int time = time();
    time = time - ( time % 60 );
    byte[] key = md5(time.ToByteArray());
    key.append(seed);
    key = md5(key);
}
滚动方法的介绍如下：
本算法以时间和种子作为输入变量，经变换得到一个512位的密钥。在本程序中取其中间的64位作为密钥。
其首先从系统获得一个UNIX时间戳，将其减去与60的模，从而过滤掉时间在60s以内的变化。
之后，取其二进制的MD5散列作为临时密钥，在临时密钥后附加种子二进制，再对新的临时密钥取MD5散列并返回。
其最后生成的密钥的长度为512位，只与时间和种子有关。选取MD5作为散列函数使其计算快且很难反向还原，工作原理简单而安全可靠性高。采用本算法生成随机密钥可以极大提升加密算法的攻击防御力
4.2.3 HTTPS
超文本传输安全协议（HTTPS）是超文本传输协议和SSL/TLS的组合，用以提供加密通讯及对网络服务器身份的鉴定。HTTPS连接经常被用于万维网上的交易支付和企业信息系统中敏感信息的传输。
传输层安全协议（TLS），及其前身安全套接层（SSL）是一种安全协议，目的是为互联网通信，提供安全及数据完整性保障。
HTTPS目前已在互联网上广泛应用，并在其数十年的应用历史中得到了充分的检验。
本算法将所有基于HTTP的接口请求由HTTPS协议完成，并校验证书的有效性。通过这一方式，我们可以有效地避免窃听和中间人攻击等入侵方式。
4.3 实名认证及辅助性安全认证
用户在手机号码开户时登记了实名信息，我们利用手机SIM卡的ICCID向运营商请求获取实名信息，并返回给应用层。由于目前能力有限，未能和运营商开展合作，我们模拟了根据用户ICCID获取实名信息的接口。
本实名认证体系可以实现用户网络行为的全程实名化跟踪，同时不需要用户干预，且由于ICCID的基础性，用户无法篡改。
由于一些非法行为，部分手机号码未实名化，对于这些无法获取实名信息的号码，我们会提示用户无法获取实名信息，请其向运营商登记。用户可以享受登陆授权服务，但是无法使用实名制功能。
我们在认证中获取本机ICCID的同时，会和数据库进行匹配，若为陌生手机卡则要求进行额外的验证操作；如果用户卡丢失，通过运营商的挂失机制我们可以有效地将丢失卡与账户的对应关系解除；以上两者有效地避免了用户由于泄漏算法主平台密码造成的损失。对于用户多手机卡，我们采取了多卡-单用户的机制，保障了多卡用户的用户体验。
5.对第三方应用的接口与开放体系
我们称项目为Rap-ID（Rapid Automatic Procto - IDentity）。
为了促进本算法的广泛应用，接口层对外提供了URL协议、管道通信等多种API，并将其封装为多个语言下的SDK，这些API和SDK可以在网址https://github.com/rap-id/RapID-SDK获取到。
此外，本程序对外开放源代码，借此希望更多的人参与本项目的完善工作，开放的源代码列表可以在
https://github.com/rap-id获取到。
6.应用前景与未来发展方向
本项目可以应用在很多认证场景中。社交网络的登陆等常规场景、安全支付等对安全性要求较好的场景及对实名制存在需求的应用均可以采用本算法。之前提及的微信扫码登陆也可以利用此算法简化用户操作，优化用户体验。
在现实生活网吧、宾馆等场所的实名登记中，本算法可以充当“电子身份证”的角色，从而使用户在需要实名登记的场合中不需要携带身份证，只需手机即可完成操作。国家在推进网络实名制时可以利用此算法加快进程的推进和用户的接受率并有效地减少财政支出。
此外，受时间所限，有些想法未能实现。本项目可以在未来进一步提高安全性，在特殊场景下与生物识别结合，支持更多语言的SDK，在没有局域网的情形下应当允许用户通过USB通信等方式进行认证操作，并提供在单纯局域网中的认证工作方法。在项目的实际应用推广上应当积极与政府和企业取得联系，并和运营商取得合作关系。此外，我们会依托开源社区，进一步完善、宣传本项目，促进其的广泛应用。
参 考 文 献
[1]	维基百科贡献者.数据加密标准[DB/OL].
http://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%8A%A0%E5%AF%86%E6%A8%99%E6%BA%96.
[2]	孤剑.OAuth的机制原理讲解及开发流程[EB/OL].
http://blog.csdn.net/alonesword/article/details/12190075,2015-04-21/2015-04-21.
[3]	维基百科贡献者.Subscriber identity module[DB/OL].
http://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID,2015-04-21/2015-04-21.
[4]	谷歌公司.android_TelephonyManager[DB/OL].
http://www.apihome.cn/api/android/TelephonyManager.html,2015-04-21/2015-04-21.
[5]	维基百科贡献者.U盾[DB/OL].
http://zh.wikipedia.org/w/index.php?title=U%u76FE &oldid=33297576,2015-04-21/2015-04-21.
[6]	中央政府门户网站.我国已初步建立互联网基础管理制度和安全体系[EB/OL].
http://www.gov.cn/jrzg/2010-05/02/content_1597867.htm,2015-04-21/2015-04-21.
[7]	中央政府门户网站.社会各界支持依法治理网络谣言 倡导做负责任网民[EB/OL].
http://www.gov.cn/jrzg/2012-04/11/content_2111152.htm,2015-04-21/2015-04-21.
[8]	中央政府门户网站.公安部召开电话"黑卡"治理专项行动动员部署会 快速关停违法犯罪电话码号[EB/OL].
http://www.gov.cn/xinwen/2015-01/09/content_2802462.htm,2015-04-21/2015-04-21.
[9]	中央政府门户网站.国务院印发《社会信用体系建设规划纲要（2014—2020年）》[EB/OL].
http://www.miit.gov.cn/n11293472/n11293832/n13095885/16047719.html,2015-04-21/2015-04-21.
[10]	eID.cn.认识eID--eID公民网络电子身份标识[EB/OL].
http://eid.cn/whatiseid.html,2015-04-21/2015-04-21.
[11]	维基百科贡献者.Electronic identity card[DB/OL].
http://en.wikipedia.org/wiki/Electronic_identity_card,2015-04-21/2015-04-21.
[12]	百度百科贡献者.eID[DB/OL].
http://baike.baidu.com/link?url=OE_uD2mVuVbfkqjFDQvnCxiupiOvEjLJG4Tyv-Wp5I0E5ja7iEm8LAgQhXsjXhquy886FrzihEzVyaNWkqsKT_,2015-04-21/2015-04-21.
[13]	维基百科贡献者.Security token[DB/OL].
http://en.wikipedia.org/wiki/Security_token,2015-04-21/2015-04-21.
[14]	维基百科贡献者.RSA SecurID[DB/OL].
http://en.wikipedia.org/wiki/RSA_SecurID,2015-04-21/2015-04-21.
[15]	ECMA-404,The JSON Data Interchange Standard[S].
[16]	维基百科贡献者.文本传输安全协议[DB/OL].
http://zh.wikipedia.org/zh/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE,2015-04-21/2015-04-21.
[17]	FIDO Alliance.Specifications Overview[DB/CD].
https://fidoalliance.org/specifications/download/,2015-04-21/2015-04-21.
[18]	FIDO Alliance.Universal 2nd Factor (U2F) Overview
[DB/CD].https://fidoalliance.org/specifications/download/,2015-04-21/2015-04-21.
[19]	RFC6749,The OAuth 2.0 Authorization Framework[S].
[20]	郭霖.第一行代码[M].北京:人民邮电出版社,2014.
[21]	王群.计算机网络技术[M].北京:清华大学出版社,2012.
[22]	梅洛尼 (Julie C. Meloni).PHP、MySQL和Apache入门经典[M].北京:人民邮电出版社,2013.
[23]	朴灵.深入浅出Node.js[M].北京:人民邮电出版社,2013.
[24]	Christian Nagel, Jay Glynn, Morgan Skiner(著), 李铭(译), 黄静(审校).C#高级编程[M].北京:清华大学出版社,2015.
[25]	yzx99.贴一个C#下生成一次自动增加版本号的代码
[EB/OL].http://bbs.csdn.net/topics/390598405,2015-03-08/2015-03-08.
[26]	lanmao100.正则表达式获取URL参数
[EB/OL].http://blog.csdn.net/lanmao100/article/details/5648202,2015-03-08/2015-03-08.
[27]	佚名.C#注册URL协议，使用浏览器打开本地程序，类似网页上点了QQ交谈打开本地QQ客户端程序
[EB/OL].http://www.yanyulin.info/pages/2015/01/7379210704746.html,2015-03-08/2015-03-08.
[28]	tomatozq.C#与android中DES与base64的相互转换
[EB/OL].http://blog.csdn.net/tomatozq/article/details/20773559,2015-03-08/2015-03-08.
[29]	Microsoft Corp..async (C# Reference) - MSDN 
Library[DB/OL].https://msdn.microsoft.com/en-us/library/hh156513.aspx,2015-03-08/2015-03-08.
[30]	Microsoft Corp..TcpClient Class - MSDN 
Library[DB/OL].https://msdn.microsoft.com/en-us/library/system.net.sockets.tcpclient(v=vs.110).aspx,2015-03-08/2015-03-08.
[31]	Microsoft Corp..UdpClient Class - MSDN 
Library[DB/OL].https://msdn.microsoft.com/en-us/library/system.net.sockets.udpclient(v=vs.110).aspx,2015-03-08/2015-03-08.
[32]	boxeeremote.AndroidUDP - boxeeremote - Sending and receiving UDP broadcast[DB/OL].
https://code.google.com/p/boxeeremote/wiki/AndroidUDP,2015-04-22/2015-04-22.
[33]	StackOverflow用户.Android TCP Server Client 
Communication[EB/OL].http://stackoverflow.com/questions/20263522/android-tcp-server-client-communication,2015-04-22/2015-04-22.
[34]	arthinking.Android中使用Gson解析JSON数据[EB/OL].
http://www.itzhai.com/android-to-parse-json-data-using-gson.html,2015-04-22/2015-04-22.
[35]	stonecao.Android Handler机制[EB/OL].
http://blog.csdn.net/stonecao/article/details/6417364,2015-04-22/2015-04-22.
[36]	谷歌公司.HttpClient | Android 
Developers[DB/OL].http://developer.android.com/reference/org/apache/http/client/HttpClient.html,2015-04-22/2015-04-22.
[37]	FezVrasta, nelsonomuto, npvn. FezVrasta/
bootstrap-material-design[DB/OL].https://github.com/FezVrasta/bootstrap-material-design,2015-04-22/2015-04-22